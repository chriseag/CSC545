# -*- coding: utf-8 -*-
"""CSC545 Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t-5W4sdiWMHORBj9BgThDYAes7bQvsgH
"""

import numpy as np

class Environment:
    def __init__ (self, width, height, dirt_placement):
        self.width = width
        self.height = height
        self.grid = [["clean" for _ in range(width)] for _ in range(height)]
        for (x, y) in dirt_placement:
            self.grid[y][x] = "dirty"

    def is_clean(self):
        for row in self.grid:
          for cell in row:
            if cell == "dirty":
              return False
        return True

    def is_dirty(self, x, y):
        return self.grid[y][x] == "dirty"

    def clean(self, x, y):
        if self.grid[y][x] == "dirty":
            self.grid[y][x] = "clean"
            return True
        return False

class Agent:
    def __init__ (self, environment, start_x, start_y):
        self.environment = environment
        self.x = start_x
        self.y = start_y
        self.performance_score = 0

    def perceive_then_act(self):
        if self.environment.is_dirty(self.x, self.y):
            self.environment.clean(self.x, self.y)
            self.performance_score += 1
        else:
            self.move()
            self.performance_score += 1

    def move(self):
        if self.x < self.environment.width - 1:
            self.x += 1
        elif self.y < self.environment.height - 1:
            self.x = 0
            self.y += 1
        else:
            self.x = 0
            self.y = 0


all_scores = []
env = Environment(1, 2, [(0, 0)])
agent = Agent(env, 0, 1)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [(0, 1)])
agent = Agent(env, 0, 1)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [(0, 0), (0, 1)])
agent = Agent(env, 0, 1)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [])
agent = Agent(env, 0, 1)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [(0, 0)])
agent = Agent(env, 0, 0)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [(0, 1)])
agent = Agent(env, 0, 0)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [(0, 0), (0, 1)])
agent = Agent(env, 0, 0)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)

env = Environment(1, 2, [])
agent = Agent(env, 0, 0)

while not env.is_clean():
  agent.perceive_then_act()

print(f"Agent's Performance Score: {agent.performance_score}")
all_scores.append(agent.performance_score)


avg = np.mean(all_scores)
print(f"Overall Average Performance Score: {avg}")